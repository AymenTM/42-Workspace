{
	// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:

	// "Print to console":
	// {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

/* How this works:

	1 - Just follow the following template:


			"Snippet Name":
			{
				"prefix" : "something you type that will make this snippet appear in suggestions",
				"body": [
					"what you want to appear when the snippet is selected",
					"if you have multiple lines",
					""
				],
				"description": "description of what it does"
			},

	2 - Special Character Definitions:

		A -		$0 :

				Final cursor position; this is where the cursor will stop.

		B -		$1 , $2, ... :

				This is where your cursor will stop at when you press
				'tab'.


		C -		${1:label}, ${2:another label}, ${3:and another} , ... :

				This is where there will be a selection where you'll be
				able to fill in the selection with whatever you want. You
				also get to these by pressing 'tab'.


    "Snippet Template":
	{
		"prefix": "snippet template",
		"body": [
			"\"${1:name}\":",
			"{",
				"\t\"prefix\": \"${2:suggestion}\",",
				"\t\"body\": [",
					"\t\t\"$0\",",
				"\t],",
				"\t\"description\": \"${3:text}\"",
			"},",
		],
		"description": "Spawn a snippet template."
	},

*/






// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
// ======================================================================= //
//                                #INCLUDES                                //
// ======================================================================= //
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

	"Include Libft":
	{
		"prefix" : "import libft.h ",
		"body": [
			"#include \"libft.h\"",
		],
		"description": "Include libft."
	},

	"Include Standard Header":
	{
		"prefix" : "import standard header",
		"body": [
			"#include <$0>",
		],
		"description": "Include standard header library."
	},

	"Include Pwd File Header":
	{
		"prefix" : "import file",
		"body": [
			"#include \"$0\"",
		],
		"description": "Include file header."
	},

	"Standard i/o Library Header":
	{
		"prefix" : "import stdio.h",
		"body": [
			"#include <stdio.h>",
		],
		"description": "Include stdio.h"
	},

	"Standard Library Header":
	{
		"prefix" : "import stdlib.h",
		"body": [
			"#include <stdlib.h>",
		],
		"description": "Include stdlib.h"
	},

	"String Library Header":
	{
		"prefix" : "import string.h",
		"body": [
			"#include <string.h>",
		],
		"description": "Include string.h"
	},

	"Uni-standard Library Header":
	{
		"prefix" : "import unistd.h",
		"body": [
			"#include <unistd.h>",
		],
		"description": "Include unistd.h"
	},

	"Math Library Header":
	{
		"prefix" : "import math.h",
		"body": [
			"#include <math.h>",
		],
		"description": "Include math.h"
	},




// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
// ======================================================================= //
//                            FRAMEWORKS & MAINS                           //
// ======================================================================= //
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


	"Comments":
	{
		"prefix" : "cmt comments",
		"body": [
			"/*",
			"** $0",
			"**",
			"*/"
		],
		"description": "Spawns a comment block."
	},

	"Documentation":
	{
		"prefix" : "doct documentation",
		"body": [
			"/*",
			"**    NAME",
			"**         func_name -- brief.",
			"**",
			"**    SYNOPSIS",
			"**         #include <libft.h>",
			"**",
			"**         int",
			"**         func_name(args);",
			"**",
			"**    PARAMETERS",
			"**",
			"**         PARAM 1                 Brief",
			"**",
			"**         PARAM 2                 Brief",
			"**",
			"**         PARAM 3                 Brief",
			"**",
			"**    DESCRIPTION",
			"**         Description.",
			"**",
			"**    RETURN VALUES",
			"**         If successful returns 0; otherwise -1.",
			"*/"
		],
		"description": "Spawns a documentation."
	},

	"Header Framework":
	{
		"prefix" : "header",
		"body": [
			"#ifndef ${1:HEADER}_H",
			"# define $1_H",
			"\n$0\n",
			"#endif"
		],
		"description": "Spawns a test main framework."
	},

	"Test Main Framework":
	{
		"prefix" : "int main test framework",
		"body": [
			"/*\n *\n * TEST MAIN\n *\n */",
			"",
			"#include \"$3\"",
			"",
			"#include <stdio.h>",
			"#include <stdlib.h>",
			"#include <string.h>",
			"#include <unistd.h>",
			"",
			"int\t\tmain(int ac, char *av[])",
			"{",
			"\tif (ac != $1)",
			"\t{",
				"\t\tprintf(\"Usage: ./a $2\\n\");",
				"\t\treturn (1);",
			"\t}",
			"\t",
			"\t",
			"\tprintf(\"%s\\n\", $0);",
			"\t",
			"\t",
			"\treturn (0);",
			"}"
		],
		"description": "Spawns a test main framework."
	},

	// "Spawn a Source File Framework":
	// {
	// 	"prefix" : "source file framework source framework",
	// 	"body": [
	// 		"#include <stdio.h>",
	// 		"",
	// 		"int\t\tmain(int ac, char *av[])",
	// 		"{",
	// 		"\tif (ac != ${1:2})",
	// 		"\t{",
	// 			"\t\tprintf(\"Usage: ./${2:program}\\n\");",
	// 			"\t\treturn (1);",
	// 		"\t}",
	// 		"\t$0",
	// 		"\treturn (0);",
	// 		"}"
	// 	],
	// 	"description": "Spawn an 'int main' body with 'ac'."
	// },

/*
** ft_printf.c
**
** Reproducing the function 'printf'.
**
** COPYRIGHT NOTICE: (c) 2018 Barr Group. All rights reserved.
**
*/

// #include <stdint.h>
// #include <stdbool.h>

// #include “module.h”






/*** end of file ***/



	"Spawn a Main that takes Arguments":
	{
		"prefix" : "int main argc int main av",
		"body": [
			"",
			"#include \"libft.h\"",
			"",
			"int\t\tmain(int ac, char *av[])",
			"{",
			"\tif (ac != $1)",
			"\t{",
				"\t\tft_putstr(\"Usage: ./a $2\\n\");",
				"\t\treturn (1);",
			"\t}",
			"\t",
			"\t$0",
			"\t",
			"\treturn (0);",
			"}",
		],
		"description": "Spawn an 'int main' body without 'ac'."
	},

	"Spawn a Main that takes Void":
	{
		"prefix" : "int main void",
		"body": [
			"",
			"#include \"libft.h\"",
			"",
			"int\t\tmain(void)",
			"{",
			"\t$0",
			"\t",
			"\treturn (0);",
			"}",
		],
		"description": "Spawn an 'int main' body without 'ac' or 'av'."
	},


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
// ======================================================================= //
//                            DATA-TYPE VARIABLES                          //
// ======================================================================= //
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


	// "Int Variable":
	// {
	// 	"prefix" : "int variable",		// inv (also work as suggestions)
	// 	"body": [
	// 		"int\t${1:i};",
	// 		"$0"
	// 	],
	// 	"description": "Spawn an int variable."
	// },

	// "Unsigned Int Variable":
	// {
	// 	"prefix" : "uint variable",		// inv (also work as suggestions)
	// 	"body": [
	// 		"unsigned int\t${1:i};",
	// 		"$0"
	// 	],
	// 	"description": "Spawn an unsigned int variable."
	// },

	// "Short Int Variable":
	// {
	// 	"prefix" : "short variable",		// inv (also work as suggestions)
	// 	"body": [
	// 		"short\t${1:i};",
	// 		"$0"
	// 	],
	// 	"description": "Spawn an unsigned int variable."
	// },

	// "Char Variable":
	// {
	// 	"prefix" : "char variable", 	// chv (also work as suggestions)
	// 	"body": [
	// 		"char\t${1:c};",
	// 		"$0"
	// 	],
	// 	"description": "Spawn a Char variable."
	// },

	// "Float Variable":
	// {
	// 	"prefix" : "float variable", 	// fv (also work as suggestions)
	// 	"body": [
	// 		"float\t${1:i};",
	// 		"$0"
	// 	],
	// 	"description": "Spawn a Float variable."
	// },

	// "Type Variable":
	// {
	// 	"prefix" : "t_ variable",
	// 	"body": [
	// 		"t_${1:name}\t${2:var_name};",
	// 		"$0"
	// 	],
	// 	"description": "Spawn a custom type variable."
	// },




// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
// ======================================================================= //
//                          CONTROL FLOW STATEMENTS                        //
// ======================================================================= //
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


	"While Loops":
	{
		"prefix" : "while loop",
		"body": [
			"while (${3:condition})",
			"{",
				"\t$5/* do something */",
				"\t/* NOTE: incrmt iterator */",
			"}",
			"$0"
		],
		"description": "Spawns a while loop template."
	},

	"For Loops":
	{
		"prefix" : "for loop",
		"body": [
			"for (${1:int} ${2:i} = ${3:0}; ${2:i} < ${4:count}; ${2:i}--)",
			"{",
				"\t$5/* do something */",
			"}",
			"$0"
		],
		"description": "Spawns a for loop template."
	},

	"Shorthand If Statement":
	{
		"prefix" : "sif statement",
		"body": [
			"(${1:condition}) ? ${2:do_A} : ${3:do_B};",
			"$0"
		],
		"description": "Spawns a shorthand if statement."
	},

	"If Statement":
	{
		"prefix" : "if statement",
		"body": [
			"if (${1:condition})",
			"{",
				"\t$0/* do something */",
			"}",
		],
		"description": "Spawn an if statement."
	},

	"Else If Statement":
	{
		"prefix" : "elif statement",
		"body": [
			"else if (${1:condition})",
			"{",
				"\t$0/* do something */",
			"}",
		],
		"description": "Spawn an else if statement."
	},

	"Else Statement":
	{
		"prefix" : "else statement",
		"body": [
			"else",
			"{",
				"\t$0/* do something */",
			"}",
		],
		"description": "Spawn an else statement."
	},

	"If, Else Statement":
	{
		"prefix" : "ife statement",
		"body": [
			"if (${1:condition})",
			"{",
				"\t$0/* do something */",
			"}",
			"else",
			"{",
				"\t/* do something else*/",
			"}",
		],
		"description": "Spawn an if, else statement."
	},

	"If, Else if, Else Statement":
	{
		"prefix" : "iffe statement",
		"body": [
			"if (${1:condition})",
			"{",
				"\t$0/* do something */",
			"}",
			"else if (${2:condition})",
			"{",
				"\t/* do something else*/",
			"}",
			"else",
			"{",
				"\t/* do yet another something*/",
			"}",
		],
		"description": "Spawn an if, else statement."
	},

	"While with an If, Else if & Else Statement":
	{
		"prefix" : "whiffe statement",
		"body": [
			"while (${1:condition})",
			"{",
				"\tif (${2:condition})",
				"\t{",
					"\t\t$0/* do something */",
				"\t}",
				"\telse if (${3:condition})",
				"\t{",
					"\t\t/* do something else*/",
				"\t}",
				"\telse",
				"\t{",
					"\t\t/* do yet another something*/",
				"\t}",
				"\t/* NOTE: incrmt iterator */",
			"}",
		],
		"description": "Spawns a while loop with an if, else if & else Statement."
	},

	"For with an If, Else if & Else Statement":
	{
		"prefix" : "foriffe statement",
		"body": [
			"for (${1:int} ${2:i} = ${3:0}; ${2:i} < ${4:count}; ${2:i}--)",
			"{",
				"\tif (${2:condition})",
				"\t{",
					"\t\t$0/* do something */",
				"\t}",
				"\telse if (${3:condition})",
				"\t{",
					"\t\t/* do something else*/",
				"\t}",
				"\telse",
				"\t{",
					"\t\t/* do yet another something*/",
				"\t}",
			"}",
			"$0"
		],
		"description": "Spawns a for loop with an if, else if & else Statement."
	},


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
// ======================================================================= //
//                          COMMONLY USED FUNCTIONS                        //
// ======================================================================= //
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


	"Typedef":
	{
		"prefix": "typedef declaration",
		"body": [
			"typedef $0t_${1:type_name};",
		],
		"description": "Spawns a typedef."
	},

	"Struct":
	{
		"prefix": "struct declaration",
		"body": [
			"typedef struct\ts_${1:struct_name}",
			"{",
			"\t$0",
			"}\t\t\tt_$1;",
		],
		"description": "Spawns a struct declaration."
	},

	"Printf":
	{
		"prefix" : "printf ",
		"body": [
			"printf(\"$0\\\\n\");"
		],
		"description": "Print formatted string to screen."
	},

	"Printf String":
	{
		"prefix" : "printf string",
		"body": [
			"printf(\"%s\\\\n\", $0);"
		],
		"description": "Print formatted string that contains a string to screen."
	},

	"Printf Integer":
	{
		"prefix" : "printf integer",
		"body": [
			"printf(\"%i\\\\n\", $0);"
		],
		"description": "Print formatted string that contains an integer to screen."
	},
}
